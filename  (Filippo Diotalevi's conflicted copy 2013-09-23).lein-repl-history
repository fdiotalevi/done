(use clojure.core.logic)
(use done.session)
ls
(use compojure.core)
(identity 1)
(identity nil)
(filter identity [1 2 nil 3])
(def v {:a 1 :b "uno"} {:a nil :b "bb"})
(def v [{:a 1 :b "uno"} {:a nil :b "bb"}])
v
(filter #(identity (% :a)) v)
(filter #(not (nil? (% :a))) v)
(filter #(identity (% :a)) v)
(defmacro uguale [x y] (= x y))
(uguale 1 2)
(defmacro uguale [x y] (= x y))
(macroexpand-1 '(uguale 1 2))
(macroexpand '(uguale 1 2))
(uguale 1 (+ 1 2))
(defmacro uguale [x y] (= ~x ~y))
(uguale 1 (+ 1 2))
(uguale (+ 2 1) (+ 1 2))
(defmacro uguale [x y] `(= ~x ~y))
(uguale (+ 2 1) (+ 1 2))
(macroexpand-1 '(uguale 1 2))
(macroexpand-1 '(uguale (+1 2) 3))
(macroexpand-1 '(uguale (+1 2) (+ 1 3))
)
(uguale (+1 2) (+ 1 3))
~(+ 1 2)
(+ 1 2)
`(+ 1 2)
(+ 3 nil)
(and true nil)
(or true nil)
(or true (println "ddd"))
(and true (println "ddd"))
(and false (println "ddd"))
